package services.socketUtils{	//import flash.display.Sprite;	import events.SocketEvent;		import flash.errors.*;	import flash.events.*;	import flash.net.Socket;
		public class CustomSocket extends Socket {		public var response:Array = new Array();		public var messageSender:IEventDispatcher = new EventDispatcher();		public const NEW_MSG:String = "new message";		public const CONNECTEDUP:String = "connectedToIt";		public var responseMsg:String;		private var _host:String;		private var _port:uint;		private var _strToSend:String;				public function CustomSocket(host:String = null, port:uint = 0) {			super(host, port);			configureListeners();		}				public function destroy():void{						removeEventListener(Event.CLOSE, closeHandler);			removeEventListener(Event.CONNECT, connectHandler);			removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			removeEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);								}				private function configureListeners():void {			addEventListener(Event.CLOSE, closeHandler);			addEventListener(Event.CONNECT, connectHandler);			addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);		}				public function write(str:String):void {			trace("CustomSocket.write(" + str + ")");			var ev2:SocketEvent = new SocketEvent("SOCKET WRITE:"+str+":");			messageSender.dispatchEvent(ev2);									try {				if (!connected){					var ev:SocketEvent = new SocketEvent("reconnect!!!!!!");					messageSender.dispatchEvent(ev);					_strToSend = str;					connect(_host, _port);									}else{										var ev3:SocketEvent = new SocketEvent("already connected submitting.:"+str);					messageSender.dispatchEvent(ev3);										writeUTFBytes(str);					flush();									}																//	close();							} catch (e:IOError) {				trace(e);				var ev:SocketEvent = new SocketEvent("error on sending////!!!!!!");				messageSender.dispatchEvent(ev);			}		}				private function read():void {			var str:String = readUTFBytes(bytesAvailable);			responseMsg = str;			response[response.length] = str;			trace ("CustomSocket.read(" + response[response.length-1] + ")");			messageSender.dispatchEvent(new Event(this.NEW_MSG));			//close();		}				private function closeHandler(event:Event):void {			trace("CustomSocket.closeHandler(" + event + ")");			trace(response.toString());			var ev:SocketEvent = new SocketEvent("socket closed");			messageSender.dispatchEvent(ev);		}				private function connectHandler(event:Event):void {			trace("CustomSocket.connectHandler(" + event + ")");			var ev:SocketEvent = new SocketEvent("socket CONNECTED=====, resending?:"+_strToSend+":");			messageSender.dispatchEvent(ev);			messageSender.dispatchEvent(new Event(CONNECTEDUP));						/*	if (_strToSend.length>0){						writeUTFBytes(_strToSend);			flush();			_strToSend = "";						}*/		}				private function ioErrorHandler(event:IOErrorEvent):void {			trace("CustomSocket.ioErrorHandler(" + event + ")");			var ev:SocketEvent = new SocketEvent("io error");			messageSender.dispatchEvent(ev);		}				private function securityErrorHandler(event:SecurityErrorEvent):void {			trace("CustomSocket.securityErrorHandler(" + event + ")");			var ev:SocketEvent = new SocketEvent("security error");			messageSender.dispatchEvent(ev);		}				private function socketDataHandler(event:ProgressEvent):void {			trace("CustomSocket:socketDataHandler: " + event);			var ev:SocketEvent = new SocketEvent("socket data bytes available:"+bytesAvailable);			messageSender.dispatchEvent(ev);			read();		}	}}