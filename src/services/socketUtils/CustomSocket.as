package services.socketUtils{	//import flash.display.Sprite;	import events.SocketEvent;		import flash.errors.*;	import flash.events.*;	import flash.net.Socket;		import signals.StatusUpdate;		import utils.CustomEvent;	import utils.Logger;
	public class CustomSocket extends Socket {						public var response:Array = new Array();		public var messageSender:IEventDispatcher = new EventDispatcher();		public const NEW_MSG:String = "new message";		public const CONNECTED:String = "connected";		public var responseMsg:String;		private var _host:String;		private var _port:uint;				public function CustomSocket(host:String = null, port:uint = 0) {			super(host, port);			_host = host;			_port = port;			configureListeners();						}		private function configureListeners():void {			addEventListener(Event.CLOSE, closeHandler);			addEventListener(Event.CONNECT, connectHandler);			addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);		}				public function connectIt():void{			var event:SocketEvent = new SocketEvent("custom socket connecting:"+_host+":"+_port);			messageSender.dispatchEvent(event);			super.connect(_host, _port);		}		public function write(str:String):void {			trace("CustomSocket.write(" + str + ")");						try {				writeUTFBytes(str);				flush();			} catch (e:IOError) {				var event:SocketEvent = new SocketEvent("io error on write");				messageSender.dispatchEvent(event);				trace(e);			}		}		private function read():void {			var event:SocketEvent = new SocketEvent("read bytes available:"+bytesAvailable);			messageSender.dispatchEvent(event);			var str:String = readUTFBytes(bytesAvailable);			var event2:SocketEvent = new SocketEvent("readUTF bytes:"+str);			messageSender.dispatchEvent(event2);			responseMsg = str;			response[response.length] = str;			trace ("CustomSocket.read(" + response[response.length-1] + ")");			messageSender.dispatchEvent(new Event(this.NEW_MSG));		}		private function closeHandler(event:Event):void {			trace("CustomSocket.closeHandler(" + event + ")");			var event2:SocketEvent = new SocketEvent("close handler");			messageSender.dispatchEvent(event2);			trace(response.toString());		}		private function connectHandler(event:Event):void {			trace("CustomSocket.connectHandler(" + event + ")");			var event2:SocketEvent = new SocketEvent("connect handler");			messageSender.dispatchEvent(event2);			messageSender.dispatchEvent(new Event(CONNECTED));		}		private function ioErrorHandler(event:IOErrorEvent):void {			trace("CustomSocket.ioErrorHandler(" + event + ")");			var e:CustomEvent = new CustomEvent(CustomEvent.SOCKET_CONNECT_ERROR, true);			messageSender.dispatchEvent(e);			var event2:SocketEvent = new SocketEvent("io error handler");			messageSender.dispatchEvent(event2);					}		private function securityErrorHandler(event:SecurityErrorEvent):void {			trace("CustomSocket.securityErrorHandler(" + event + ")");			var e:CustomEvent = new CustomEvent(CustomEvent.SECURITY_ERROR, true);			messageSender.dispatchEvent(e);			var event2:SocketEvent = new SocketEvent("security error");			messageSender.dispatchEvent(event2);		}		private function socketDataHandler(event:ProgressEvent):void {			trace("CustomSocket:socketDataHandler: " + event);			var event2:SocketEvent = new SocketEvent("socketDataHandler, bytesAvailable:"+bytesAvailable);			messageSender.dispatchEvent(event2);			read();		}	}}