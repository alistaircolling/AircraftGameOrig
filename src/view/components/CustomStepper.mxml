<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="340" height="40">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import events.NumberEvent;
			
			import model.vo.InputObjectVO;
			
			public var _currVal:InputObjectVO;
			[Bindable]
			public var title:String;
			[Bindable]
			public var values:Vector.<InputObjectVO>;
			
			private var _switchDirection:Boolean;
			//TODO check how values work e.g. what is the value that is displayed in the stepper? if it is the current value is that then duplicated as the expected amount the user will have again and automaticaly deducted from the budget- surely the blackbox would have done this already, if so what should the default setting be on the stepper?
			
			private var _currIndex:uint; //used to store the index of the stepper
			
			//used when the user presses go to send to the black box
			public function get currVal():InputObjectVO
			{
				return _currVal;
			}

			public function set currVal(value:InputObjectVO):void
			{
				_currVal = value;
				//set the value
				valLabel.text = _currVal.value.toString();
				//set the index
				_currIndex = value.theIndex;
			}
			
			protected function down_clickHandler(event:MouseEvent):void
			{
				var oldCost:Number = (values[_currIndex] as InputObjectVO).cost;
				if (_currIndex>0){
					_currIndex--;
					currVal = values[_currIndex];
				}
				var newCost:Number = (values[_currIndex] as InputObjectVO).cost;
				updateBalance(oldCost - newCost);
			}
			
			private function updateBalance( n:Number ):void{
				if (n!=0){
					var e:NumberEvent = new NumberEvent(NumberEvent.BALANCE_UPDATE,	n);
					dispatchEvent(e);
				}
			}
			
			private function getCurrentVal():String{
				
				return currVal.value.toString()
			}
			
			protected function up_clickHandler(event:MouseEvent):void
			{
				var oldCost:Number = (values[_currIndex] as InputObjectVO).cost;
				if (_currIndex<values.length-1){
					_currIndex++;
					currVal = values[_currIndex];
				}
				var newCost:Number = (values[_currIndex] as InputObjectVO).cost;
				updateBalance(oldCost-newCost);
			}

			public function get switchDirection():Boolean
			{
				return _switchDirection;
			}
			
			//used to switch the direction of increments for negative steppers
			public function set switchDirection(value:Boolean):void
			{
				_switchDirection = value;
				if (_switchDirection){
					down.addEventListener(MouseEvent.CLICK, up_clickHandler);
					up.addEventListener(MouseEvent.CLICK, down_clickHandler);
				}else{
					down.addEventListener(MouseEvent.CLICK, down_clickHandler);
					up.addEventListener(MouseEvent.CLICK, up_clickHandler);
				}
			}

			
		]]>
	</fx:Script>
	<s:Group width="100%">
		<s:HGroup>
			
		<s:Label text="{title}"/>
		<s:Label text="%" fontStyle="italic"/>
		<s:Label id="valLabel" text="---"/>
		</s:HGroup>
		<s:HGroup right="0">
			
		<s:Button id="down" label="down" />
		<s:Button id="up" label="up" />
		</s:HGroup>
	</s:Group>
	
	
</s:Group>
