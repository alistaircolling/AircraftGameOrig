<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="1100" height="465"
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Declarations>
		<mx:SolidColorStroke id = "s1" color="blue" weight="2" />
		<mx:SolidColorStroke id = "s2" color="red" weight="2"/>
		<mx:SolidColorStroke id = "s3" color="green" weight="2"/>
		<mx:SolidColorStroke id = "blackStroke" color="black" weight="1" alpha=".4"/>
		<mx:SolidColorStroke id = "whiteS" color="white" weight="0"/>
		<s:SolidColor id="fill" color="white" alpha="0"/>
		<s:Move id="myMove" easer="{noEase}" 
				target="{rect}" duration="500" effectEnd="myMove_effectEndHandler(event)" />
		<s:Power id="noEase"
				 exponent="1"/> 
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import model.vo.GraphResultsVO;
			
			import mx.collections.ArrayCollection;
			import mx.effects.easing.*;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.olap.aggregators.CountAggregator;
			
			import spark.effects.easing.Linear;
			import spark.primitives.Line;
			
			[Bindable]
			private var chartData:ArrayCollection;
			
			[Bindable]
			private var monthTData:ArrayCollection;
			
			private var _counter:uint;
			
			private var _usedArray:Array;
			
			private var _inAir:Vector.<Number>;
			private var _onGround:Vector.<Number>;
			
			private var _totalMonths:uint;//the total number of months to move to
			private var _currentMonth:uint;
			
			
			private var _monthTA:Array = [-7.5,-7.6,-7.5,-0.2,-0.0,-0.1,0.5,0.6,1.0,0.6,1.5,1.4,1.6,1.5,1.7,1.6,1.7,1.6,1.7,1.5,1.7,1.7,1.7,1.5,-7.9,-8.1,-8.0,-0.2,0.0,-0.0,0.1,0.0,0.1,-0.1,0.1,-0.0,0.1,0.1,2.5,2.3,2.5,2.4,2.6,2.4,2.5,2.4,2.6,2.3,1.4,1.3,1.3,1.6,1.7,1.5,1.7,1.5,1.7,1.4,1.7,1.4,1.7,1.6,1.7,1.6,1.7,1.6,1.7,1.6,1.7,1.5,1.7,1.6];
			private var _percentA:Array = [67.3,65.9,67.3,66.6,68.6,67.3,74.5,74.8,79.9,77.5,84.5,82.4,87.5,83.3,85.8,84.1,86.7,83.2,87.5,82.4,86.7,85.8,85.8,82.4, 89.2,84.1,86.7,82.4,86.7,85.0,87.1,86.7,89.7,83.9,87.8,84.6,88.5,87.9,90.9,85.6,91.8,88.2,92.7,87.3,91.8,88.2,92.7,85.6,90.0,87.3,89.1,89.1,90.9,86.5,90.2,87.5,91.1,85.7,92.9,85.7,92.0,88.4,90.2,89.3,92.0,89.3,92.9,89.3,92.0,86.6,92.9,89.3];
			
			private function moveImage():void {
				myMove.end();
			//	myMove.xBy = 910/36;
				myMove.xTo = ((910/72)*_currentMonth)-910
				myMove.play();
			}
			
			public function setData( vo:GraphResultsVO ):void{
				//set the data 
				trace("setting the data within the graph component");
				addValuesToAC(vo);
			}
			
			private function drawLine( val:Number ):void{
				var line:Line = new Line();
				line.stroke = blackStroke;
				var theX:Number = val;
				line.xFrom = theX;
				line.xTo = theX;
				line.yFrom = 0;
				line.yTo = 600;
	//			lines.addElement(line);
			}
			
			private function addValuesToAC( vo:GraphResultsVO ):void{
				
				// add the new values to the array cllection then animate from the current position
				var currArray:Array = [];
				var endVal:uint = vo.monthTotal.length;//values after this are set to a line
				var topVal:uint = 12*6;// 6 years (come in 3 goes)
				
				var firstDate:Date = new Date();
				firstDate.setDate(firstDate.getDate()-100);
				_totalMonths = _counter+endVal;
				trace("totalMonths to move:"+_totalMonths);
				//	trace("counter starting round at:"+_counter);
				for (var i:uint = 0; i<=topVal; i++){
					
					var j:uint = i; //used for the last value
					if (j>=endVal){
						j= endVal-1;
					}
					
					var percentTotal:Number = Number(vo.percentFlown[j]);
					var monthTotal:Number = Number(vo.monthTotal[j]);
					//only add these values 
					if (i/4 == i%4){
						//trace("i is :"+i+"  adding quarterly amount");
					}
					//	var inAirTotal:Number = Number(vo.inAir[i%4]);
					//	var onGroundTotal:Number = Number(vo.onGround[i%4]);
					_usedArray[_counter+j] = {month:i, percent:percentTotal, monthT:monthTotal};
					
				}
				
				_inAir = vo.inAir;
				_onGround = vo.onGround;
				
				_counter += j+1;//move to the next index
				chartData.source = _usedArray;					
				linechart.dataProvider = chartData;
				linechart.executeBindings(true);
				//animate the mask
				moveImage();
				
			}
			
			private function traceAllMonthVals():void{
				trace("trace all values ------------------------");
				for (var i:uint = 0; i<chartData.length; i++){
					
					try{
						//check if the month and percent values match the arrays
						if (_monthTA[i] != chartData.getItemAt(i).monthT){
							trace("the month does not match at:"+i);
						}else{
							//	trace("ALL MONTHS MATCH =========");
						}
						if (_percentA[i] != chartData.getItemAt(i).percent){
							trace("the percent does not match at:"+i+"   array:"+_percentA[i]+"  chartData:"+chartData.getItemAt(i).percent);
						}else{
							
							//	trace("ALL PERCENTS MATCH ==========");
						}
						
					}catch(e:*){
						trace("there has been an error at:"+i);
					}
				}
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent = null):void
			{
				//intiialised
				_counter = 0;
				_usedArray = new Array(71);
				chartData = new ArrayCollection();
				_currentMonth = 0;
			}
			
			public function reset():void{
				group1_creationCompleteHandler();
				linechart.executeBindings(true);
				rect.x = -910
				//linechart.ini
			}
			
			protected function myMove_effectEndHandler(event:EffectEvent):void
			{
				if (_currentMonth<_totalMonths){
					_currentMonth +=2;
					moveImage();
				}
				
				trace("Month:"+_currentMonth+"  total:"+_totalMonths);
				//drawLine( rect.x );
			}
			
			
			
		]]>
	</fx:Script>
	
	<!--	<s:Group id="chart" width="800" height="600" mask="{rect}">  -->
	<!-- < mx:Image source="@Embed('../embed/GRAPH.png')" /> -->
	<s:Group id="chart" width="910" height="210" horizontalCenter="0" verticalCenter="0" mask="{rect}">
		
		<mx:LineChart id="linechart" color="0xffffff" height="210" width="910" backgroundElements="{[]}"
					  showDataTips="true" dataProvider="{chartData}" fill="{fill}" >
			<mx:seriesFilters>
				<fx:Array/>
			</mx:seriesFilters>
			<mx:horizontalAxis>
				<mx:CategoryAxis 
					id="a1"
					dataProvider="{chartData}" 
					categoryField="Month" 
					/>
			</mx:horizontalAxis>
			
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer axis="{a1}" minorTickPlacement="none" tickPlacement="none" labelGap="0" showLabels="false" showLine="false"/>
			</mx:horizontalAxisRenderers>
			
			<mx:verticalAxisRenderers>
				<mx:AxisRenderer axis="{pcAxis}" placement="right" tickPlacement="none" labelGap="0" showLabels="false" showLine="false"/>
				<mx:AxisRenderer axis="{monthAxis}" placement="left" tickPlacement="none" labelGap="0" showLabels="false" showLine="false"/>
			</mx:verticalAxisRenderers>
			
			<mx:series>
				<mx:LineSeries yField="percent" displayName="Percent" lineStroke="{s1}" dataProvider="{chartData}">
					<mx:verticalAxis>
						<mx:LinearAxis id="pcAxis" minimum="60" maximum="100"/>
					</mx:verticalAxis>
				</mx:LineSeries>
				<mx:LineSeries yField="monthT" displayName="Month Total" lineStroke="{s2}" dataProvider="{chartData}" >
					<mx:verticalAxis >
						<mx:LinearAxis id="monthAxis" minimum="-25" maximum="10" />
					</mx:verticalAxis>
				</mx:LineSeries>
			</mx:series>
			
		</mx:LineChart>
		
		
		<!--<s:Group id="lines" width="910" height="210" /> -->
		<s:Group id="rect">
			<s:Rect width="910" height="210" x="0" >
				<s:fill>
					<s:SolidColor color="0xAA2FC9" alpha="1"/>
				</s:fill>
			</s:Rect>
		</s:Group>
	</s:Group>
</s:Panel>
