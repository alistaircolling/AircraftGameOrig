<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="view.components.*" xmlns:local="*"
					   addedToStage="windowedapplication1_creationCompleteHandler(event)"
					   showStatusBar="false"
					   width="1920" height="1080"
					   >
	<fx:Style source="AircraftGame.css"/>
	<fx:Script>
		<![CDATA[
			import flash.debugger.enterDebugger;
			import flash.utils.setInterval;
			
			import flashx.textLayout.events.StatusChangeEvent;
			
			import mx.events.AIREvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.states.OverrideBase;
			
			import signals.ChangeState;
			
			private var context:ProjectContext;
			
			protected function windowedapplication1_creationCompleteHandler(event:Event):void
			{
				stage.scaleMode = StageScaleMode.SHOW_ALL;
				
				//	stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				context = new ProjectContext(this, true);
				updateState(ChangeState.INTRO_SCREEN);
				addEventListener(KeyboardEvent.KEY_UP, keyHandler);
				
				leaderBoard.topTitle.styleName = "topTitle";
				
			}
			
			private function keyHandler( k:KeyboardEvent ):void{
				
				if (k.keyCode == 70){
					toggleFullScreen();					
				}
				
			}
			
			public function showTheError(s:String):void{
				
				//errorMsg.msg.text = s;
				errorMsg.visible  = true;
				setElementIndex(errorMsg, numElements-1);
				
			}
			
			private function toggleFullScreen():void{
				
				if (stage.displayState == StageDisplayState.NORMAL){
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				}else{
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			
			public function updateState( s:String ):void{
				
				currentState = s;
				trace("changing state to:"+s);
				//add any additional logic here
				switch(currentState){
					case ChangeState.INTRO_SCREEN:
						/* introView.visible = true;//testing
						inputView.visible = false;
						resultsView.visible = false;
						lbHolder.visible = false; */
						showSection(blackout, false);
						showSection(introView, true);
						showSection(inputView, false);
						showSection(resultsView, false);
						showSection(lbHolder, false);
						break
					
					case ChangeState.ENTER_SCREEN:
						//	inputView.visible = true;
						//	resultsView.visible = false;
						//	lbHolder.visible = true
						showSection(introView, false);
						showSection(inputView, true);
						showSection(resultsView, false);
						showSection(lbHolder, true);
						setElementIndex(inputView, numElements-1);
						inputView.updateDisplay();
						break
					case ChangeState.RESULTS_SCREEN:
						/* resultsView.visible = true;
						inputView.visible = false;
						finalView.visible = false;
						lbHolder.visible = true; */
						showSection(resultsView, true);
						showSection(inputView, false);
						showSection(finalView, false);
						showSection(lbHolder, true);
						break
					case ChangeState.FINAL_SCREEN:
						/* 	resultsView.visible = false;
						inputView.visible = false;
						finalView.visible = true;
						exitView.visible = false;
						lbHolder.visible = false; */
						showSection(resultsView, false);
						showSection(lbHolder, false);
						showSection(inputView, false);
						showSection(finalView, true);
						showSection(exitView, false);
						showSection(lbHolder, false);
						showSection(blackout, true);
						
						break
					case ChangeState.EXIT_SCREEN:
						/* 	exitView.visible = true;
						finalView.visible = false;
						introView.visible = false;
						lbHolder.visible = false; */
						showSection(exitView, true);
						showSection(finalView, false);
						showSection(introView, false);
						showSection(lbHolder, false);
						break
					default:						
						break
				}
			}
			
			private function showSection( sect:Group, b:Boolean ):void{
				if(b){
					fadeIn.target = sect;
					fadeIn.play();
				}else{
					fadeOut.target = sect;
					fadeOut.play();
				}
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				statusLabel.visible = !statusLabel.visible;;
			}
			
			
			protected function fadeIn_effectStartHandler(event:EffectEvent):void
			{
				(event.effectInstance.target as Group).visible = true;
			}
			
			
			protected function fadeOut_effectEndHandler(event:EffectEvent):void
			{
				(event.effectInstance.target as Group).visible = false;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Fade id="fadeIn" alphaTo="1" duration="2000" effectStart="fadeIn_effectStartHandler(event)" startDelay="1000"/>
		<s:Fade id="fadeOut"  alphaTo="0" duration="0" effectEnd="fadeOut_effectEndHandler(event)"/>
	</fx:Declarations>
	<s:states>
		<s:State name="intro" />
		<s:State name="enter" />
		<s:State name="resultsScreen" />
		<s:State name="finalScreen" />
		<s:State name="exitScreen" />
	</s:states>
	<mx:Image source="@Embed('../embed/selex-background.png')" width="1920" height="1080" smoothBitmapContent="true" />
	<s:Group id="blackout" >
		<mx:Canvas width="1920" height="1080" backgroundAlpha=".5" backgroundColor="0x0"/>
	</s:Group>
	<s:Group y="1050" x="1700" >
		<s:Label id="gameID" text="GameID: --- " styleName="gameID" visible="false" includeInLayout="false"/>
	</s:Group>
	<components:InputView id="inputView" includeIn="enter, intro, resultsScreen" alpha="0"/> <!-- input wont show correctly as it isnt visible when the data is first recived need to fix TODO -->
	<components:ResultsView id="resultsView" includeIn="resultsScreen, enter, finalScreen, intro" alpha="0" />
	<components:FinalView id="finalView" includeIn="resultsScreen, finalScreen, enter" alpha="0"/>
	<components:ExitView id="exitView" includeIn="finalScreen, exitScreen" alpha="0"/>
	<components:IntroView id="introView" includeIn="intro, exitScreen, enter" alpha="0" />
	<s:Group id="lbHolder" x="1568" top="267" includeIn="intro, enter, resultsScreen, exitScreen, finalScreen" alpha="0">
		<mx:Image source="@Embed('../embed/lbtop3.png')" smoothBitmapContent="true" />
		<components:LeaderBoard id="leaderBoard" title="Leader board" horizontalCenter="-10" top="55" spacerHeight="43"
								
								/>
	</s:Group>
	<s:TextArea id="statusLabel" fontSize="24"  left="5"  height="600" width="1000" includeInLayout="false" visible="false"/>
	<s:Button label="show status" x="1800" y="1000" click="button1_clickHandler(event)" visible="false"/>
	<components:ErrorMessage id="errorMsg" visible="false"/>
</s:WindowedApplication>
