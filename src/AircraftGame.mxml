<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="view.components.*" xmlns:local="*"
					   addedToStage="windowedapplication1_creationCompleteHandler(event)"
					   showStatusBar="false"
					   width="1920" height="1080" xmlns:audio="view.audio.*"
					   >
	<fx:Style source="AircraftGame.css"/>
	<fx:Script>
		<![CDATA[
			import flash.debugger.enterDebugger;
			import flash.utils.setInterval;
			
			import flashx.textLayout.events.StatusChangeEvent;
			
			import mx.core.UIComponent;
			import mx.events.AIREvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.states.OverrideBase;
			
			import signals.ChangeState;
			
			private var context:ProjectContext;
			
			private var square:Sprite;
			
			protected function windowedapplication1_creationCompleteHandler(event:Event):void
			{
				stage.scaleMode = StageScaleMode.SHOW_ALL;
				
				context = new ProjectContext(this, true);
				updateState(ChangeState.INTRO_SCREEN);
				addEventListener(KeyboardEvent.KEY_UP, keyHandler);
				createContextMenu(); 
			}
			
			
			private function createContextMenu():void{
				square  = new Sprite();
				square.graphics.beginFill(0x000000, 0.4);
				square.graphics.drawRect(-4,-30,80,80);
				square.graphics.endFill();
				
				var newComponent:UIComponent = new UIComponent();
				
				//must set the UI component to wrap the sprite - so set width and height
				newComponent.width = 80;
				newComponent.height = 60;
				newComponent.alpha = .5;
				newComponent.addChild(square);
				myPanel.addChild(newComponent);
				
				var menuItem:ContextMenuItem = new ContextMenuItem("Quit");
				menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,quitApp);
				
				var fSItem:ContextMenuItem = new ContextMenuItem("Fullscreen");
				fSItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, toggleFullScreen);
				
				var muteItwm:ContextMenuItem = new ContextMenuItem("Toggle Mute");
				muteItwm.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, toggleMute);
				
				var customContextMenu:ContextMenu = new ContextMenu();
				//hide the Flash menu
				customContextMenu.hideBuiltInItems();
				customContextMenu.customItems.push(menuItem);
				customContextMenu.customItems.push(fSItem);
				customContextMenu.customItems.push(muteItwm);
				square.contextMenu = customContextMenu;
				addEventListener(Event.CLOSING, onExiting);
				addEventListener(Event.ENTER_FRAME, oef);
				
			}
			
			private function oef( e:Event ):void{
				removeEventListener(Event.ENTER_FRAME, oef);
				myPanel.visible = true;				
			}
			
			private function doCutCommand(event:ContextMenuEvent):void{trace("cut");}
			private function doCopyCommand(event:ContextMenuEvent):void{trace("copy");}
			private function doPasteCommand(event:ContextMenuEvent):void{trace("paste");}
			
			private function contMenuSelect(e:ContextMenuEvent):void{
				trace("sda");
			}
			
			private function quitApp( e:ContextMenuEvent ):void{
				applicationExit();
			}
			
			private function onExiting(exitingEvent:Event):void {
				removeEventListener(Event.CLOSING, onExiting);
				var winClosingEvent:Event;
				for each (var win:NativeWindow in NativeApplication.nativeApplication.openedWindows) {
					winClosingEvent = new Event(Event.CLOSING,false,true);
					win.dispatchEvent(winClosingEvent);
					if (!winClosingEvent.isDefaultPrevented()) {
						win.close();
					} else {
						exitingEvent.preventDefault();
					}
				}
				
				if (!exitingEvent.isDefaultPrevented()) {
					//perform cleanup
				}
			}
			
			public function applicationExit():void {
				var exitingEvent:Event = new Event(Event.EXITING, false, true);
				NativeApplication.nativeApplication.dispatchEvent(exitingEvent);
				if (!exitingEvent.isDefaultPrevented()) {
					NativeApplication.nativeApplication.exit();
				}
			}
			
			private function keyHandler( k:KeyboardEvent ):void{
				
				if (k.keyCode == 70){
					toggleFullScreen();					
				}
				
			}
			
			public function showTheError(s:String):void{
				if (!errorMsg.visible){
					errorMsg.msg.text = s;
					errorMsg.visible  = true;
					setElementIndex(errorMsg, numElements-1);
				}
			}
			
			private function toggleMute( e:ContextMenuEvent = null ):void{
				
				var event:Event = new Event("toggleMute");
				dispatchEvent(event);
			}
			
			private function toggleFullScreen( e:ContextMenuEvent = null ):void{
				if (stage.displayState == StageDisplayState.NORMAL){
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				}else{
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			
			public function updateState( s:String ):void{
				
				currentState = s;
				trace("changing state to:"+s);
				if (!myPanel.parent){
					trace("!no parent for panel!");
					//used to re-add panel as it is being removed on state change for some reason  //HACK
					addElement(myPanel);
				}
				if (!music.parent){
					trace("!no parent for music!");
					//used to re-add panel as it is being removed on state change for some reason  //HACK
					addElement(music);
				}
				
				//check music has a listener
				
				if (!music.chan.hasEventListener(Event.SOUND_COMPLETE)){
					music.reAddListener();
					trace("adding listener for music loop");
				}
				
				trace("MUSIC POS:"+music.chan.position);
				
				//add any additional logic here
				switch(currentState){
					case ChangeState.INTRO_SCREEN:
						
						showSection(blackout, false);
						showSection(introView, true);
						introView.startTimer(true);//used to track user interaction and show video
						showSection(inputView, false);
						showSection(resultsView, false);
						showSection(lbHolder, false);
						break
					
					case ChangeState.ENTER_SCREEN:
		
						showSection(introView, false);
						showSection(inputView, true);
						showSection(resultsView, false);
						showSection(lbHolder, true);
						finalView.visible = false;
						finalView.alpha = 0;
						setElementIndex(inputView, numElements-3);
						inputView.updateDisplay();
						break
					case ChangeState.RESULTS_SCREEN:
	
						exitView.visible = false;
						exitView.alpha = 0;
					//	showSection(resultsView, true);
						//this is so the planes helis dont fade in
						resultsView.alpha = 1;
						resultsView.visible = true;
						resultsView.mouseEnabled = true;
						
						showSection(inputView, false);
						showSection(lbHolder, true);
						break
					case ChangeState.FINAL_SCREEN: //has results
				
						showSection(introView, false);
						showSection(resultsView, false);
						showSection(lbHolder, false);
						showSection(inputView, false);
						showSection(finalView, true);
						showSection(exitView, false);
						showSection(lbHolder, false);
						showSection(blackout, true);
						exitView.playVideo(false);
						
						
						break
					
					case ChangeState.EXIT_SCREEN://has video
						
						exitView.userEntered();
						showSection(blackout, true);
						showSection(exitView, true);
						exitView.playVideo(true);
						showSection(finalView, false);
						showSection(introView, false);
						showSection(lbHolder, false);
						showSection(resultsView, false);
						break
					
					default:						
						break
				}
				trace("panel vis:"+myPanel.visible);
				trace("panel depth:"+myPanel.depth);
			}
			
			
			private function makeSurePanelDisplays():void{
				
				if(!myPanel.parent){
					
					
				}
				
			}
			
			private function showSection( sect:Group, b:Boolean ):void{
				trace("SHOW SECTION:"+sect.name+"  yes?:"+b);
				makeSurePanelDisplays();
				
				if(b){
					fadeIn.target = sect;
					fadeIn.play();
					
				}else{
					fadeOut.target = sect;
					fadeOut.play();
				}
				sect.mouseEnabled = b;
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				statusLabel.visible = !statusLabel.visible;;
			}
			
			
			protected function fadeIn_effectStartHandler(event:EffectEvent):void
			{
				(event.effectInstance.target as Group).visible = true;
			}
			
			
			protected function fadeOut_effectEndHandler(event:EffectEvent):void
			{
				(event.effectInstance.target as Group).visible = false;
			}
			
			public function changeColor(event:ContextMenuEvent):void
			{square.transform.colorTransform = getRandomColor();}
			
			public function getRandomColor():ColorTransform{
				return new ColorTransform(Math.random(), Math.random(), Math.random(),1,(Math.random() * 512) - 255, (Math.random() * 512) -255, (Math.random() * 512) - 255, 0);
			}
			
			private function onRemoved(e:Event):void{
				
				trace("removed panel!");
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Fade id="fadeIn" alphaTo="1" duration="2000" effectStart="fadeIn_effectStartHandler(event)" startDelay="1000"/>
		<s:Fade id="fadeOut"  alphaTo="0" duration="1500" effectEnd="fadeOut_effectEndHandler(event)"/>
	</fx:Declarations>
	<s:states>
		<s:State name="intro" />
		<s:State name="enter" />
		<s:State name="resultsScreen" />
		<s:State name="finalScreen" />
		<s:State name="exitScreen" />
	</s:states>
	<mx:Image id="heliBackground" source="@Embed('../embed/heli-background.png')" width="1920" height="1080" smoothBitmapContent="true" />
	<mx:Image id="planeBackground" source="@Embed('../embed/selex-background.png')" width="1920" height="1080" smoothBitmapContent="true" />
	<s:Group id="blackout" >
		<mx:Canvas width="1920" height="1080" backgroundAlpha=".5" backgroundColor="0x0"/>
	</s:Group>
	<s:Group y="1050" x="1700" >
		<s:Label id="gameID" text="GameID: --- " styleName="gameID" visible="false" includeInLayout="false"/>
	</s:Group>
	<components:InputView id="inputView" includeIn="enter, intro, resultsScreen" alpha="0"/> <!-- input wont show correctly as it isnt visible when the data is first recived need to fix TODO -->
	<components:ResultsView id="resultsView" includeIn="resultsScreen, enter, finalScreen, intro, exitScreen" alpha="0" />
	<components:FinalView id="finalView" includeIn="resultsScreen, finalScreen, enter, exitScreen" alpha="0"/>
	<components:ExitView id="exitView" includeIn="finalScreen, exitScreen, resultsScreen" alpha="0"/>
	<components:IntroView id="introView" includeIn="intro, exitScreen, enter" alpha="0" />
	<s:Group id="lbHolder" x="1568" top="267" includeIn="intro, enter, resultsScreen, exitScreen, finalScreen" alpha="0">
		<mx:Image source="@Embed('../embed/lbtop3.png')" smoothBitmapContent="true" />
		<components:LeaderBoard id="leaderBoard" title="0" horizontalCenter="29" top="55" spacerHeight="43"/>
	</s:Group>
	<s:Button label="show status" x="1800" y="1000" click="button1_clickHandler(event)" visible="false"/>
	<components:ErrorMessage id="errorMsg" visible="false"/>
	<mx:Panel id="myPanel" x="1780"  y="60" alpha="0" visible="true" removedFromStage="onRemoved(event)" remove="onRemoved(event)" removed="onRemoved(event)"/> 
	<s:TextArea id="statusLabel" fontSize="24"  left="5"  height="600" width="1000" includeInLayout="false" visible="false"/>
	<!-- <s:Group id="myPanel" x="1703" y="60" alpha="0"/> -->
	<audio:BackgroundMusic id="music"/>
</s:WindowedApplication>
